---
name: Scala Code Assurance and Tests
on:
  workflow_call:
    inputs:
      WORKDIR:
        required: false
        type: string
        default: ./
      CONSUL_ADDRESS:
        required: false
        type: string
      CONSUL_TOKEN:
        required: false
        type: string
      COMMAND:
        required: false
        type: string
    outputs:
      VERSION:
        value: ${{ jobs.tests.outputs.VERSION }}
    secrets:
      NEXUS_USERNAME:
        required: true
      NEXUS_PASSWORD:
        required: true
      KUBECONFIG:
        required: true

jobs:
  code-assurance:
    runs-on: ubuntu-latest
    env:
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up scala
      uses: olafurpg/setup-scala@v11
      with:
        java-version: adopt@1.8

    - name: Check code with scalafmt
      working-directory: ${{ inputs.WORKDIR }}
      run: sbt scalafmtCheckAll

  tests:
    runs-on: ubuntu-latest
    env:
      NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
      NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
      CONSUL_ADDRESS: ${{ inputs.CONSUL_ADDRESS }}
      CONSUL_TOKEN: ${{ inputs.CONSUL_TOKEN }}
      KUBECONFIG: '${{ github.workspace }}/.kube/pod-kubeconfig'
    outputs:
      VERSION: ${{ steps.setvars.outputs.VERSION }}
    steps:
    - uses: actions/checkout@v2

    - name: Set up scala
      uses: olafurpg/setup-scala@v11
      with:
        java-version: adopt@1.8
    
    - name: Port forward
      run: |
        mkdir -p '${{ github.workspace }}/.kube' \
          && echo '${{ secrets.KUBE_CONFIG}}' | base64 -d > $KUBECONFIG
    
    - run: echo '${{ secrets.KUBE_CONFIG}}'

    - run: 'kubectl port-forward service/consul-server 8500:8500 -n data-kv-store --kubeconfig $KUBECONFIG &'
    
    - run: 'curl --header "X-Consul-Token: $CONSUL_TOKEN" http://localhost:8500/v1/kv/ingestion/poseidon-cluster'


    # - name: Test runtime
    #   working-directory: ${{ inputs.WORKDIR }}
    #   run: sbt test

    # - name: Install ansi2txt
    #   run: sudo apt-get install -y colorized-logs

    # - name: Expose variables
    #   working-directory: ${{ inputs.WORKDIR }}
    #   id: setvars
    #   run: |-
    #     echo "::set-output name=VERSION::$(sbt 'inspect actual version' | grep 'Setting: java.lang.String' | cut -d '=' -f2 | tr -d ' ' | ansi2txt)"
